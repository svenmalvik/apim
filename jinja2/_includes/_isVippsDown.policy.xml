<choose>
  <when condition="@({{IsVippsDown}} &amp;&amp; !Convert.ToBoolean(context.Request.Headers.GetValueOrDefault(&quot;X-Developer-Access&quot;, &quot;false&quot;)))">

		<log-to-eventhub logger-id="{{EventHub-Logger-Id}}">@{
												var header = "Environment\tProductName\tUtcDate\tInstance\tRegion\tRequestId\tClientIp\tUserEmail\tApiName\tApiPath\tOperationName\tSubscriptionId\tRequestUrl\tMethod\tStatusCode\tRequestBody\tCorrelationId\tDeviceId\tUserId\tResponseCode\tTotalDuration\tBackendTime";
												var values = string.Empty;
												var clientIP = context.Request.IpAddress;
												var forwarderIP = context.Request.Headers.GetValueOrDefault("X-Forwarded-For", "");
												
												if(!string.IsNullOrEmpty(forwarderIP))
												{
														clientIP = forwarderIP.Split(',').FirstOrDefault().Split(':').FirstOrDefault();
												}
												try
												{
														var requestBody = "NO_BODY";
														if({{IsRequestBodyLogEnabled}} &amp;&amp; context.Request.Body != null)
														{
																requestBody = context.Variables.ContainsKey("tempRequestBody") ? Regex.Replace((string)context.Variables["tempRequestBody"], @"\r\n?|\n|\r|\t", "") :  Regex.Replace(context.Request.Body.As&lt;string&gt;(true), @"\r\n?|\n|\r|\t", "");
														}
														var userId = context.Request.Headers.GetValueOrDefault("X-Customer-Id",   "");
														var totalDurationMS = 0;
														var backendTimeMS = 0;
														var responseCode = "4060";
														
														values = string.Join("\t", "{{EnvironmentName}}", context.Product.Name, DateTime.UtcNow.ToString("s") + "Z", context.Deployment.ServiceName,context.Deployment.Region, context.RequestId, clientIP,context.User.Email, context.Api.Name, context.Api.Path, context.Operation.Name,context.Subscription.Id,context.Request.Url.ToUri().ToString(),context.Request.Method, context.Response.StatusCode, requestBody, context.Request.Headers.GetValueOrDefault("X-Global-Context-Id",   ""),context.Request.Headers.GetValueOrDefault("X-Device-Id",   ""),userId,responseCode,totalDurationMS,backendTimeMS);
												}
												catch
												{
														values = string.Join("\t", "{{EnvironmentName}}", context.Product.Name, DateTime.UtcNow.ToString("s") + "Z", context.Deployment.ServiceName,context.Deployment.Region, context.RequestId, clientIP,context.User.Email, context.Api.Name, context.Api.Path, context.Operation.Name,context.Subscription.Id,context.Request.Url.ToUri().ToString(),context.Request.Method, context.Response.StatusCode, "APIMLOGEXCEPTION", context.Request.Headers.GetValueOrDefault("X-Global-Context-Id",   ""),context.Request.Headers.GetValueOrDefault("X-Device-Id",   ""),"APIMLOGEXCEPTION","APIMLOGEXCEPTION","APIMLOGEXCEPTION","APIMLOGEXCEPTION");
												}
												
												return header + "\n" + values;
										}
		</log-to-eventhub>

		<return-response response-variable-name="existing response variable">
			<set-status code="200" reason="Vipps Down" />
			<set-body>@{
												var errorMessage = (context.Request.Headers.GetValueOrDefault("Accept-Language",   "")).Trim().StartsWith("nb") ? "er ikke tilgjengelig akkurat nå.\nLes mer på vipps.no!" : "is currently experiencing some technical problems.\nPlease try again later or go to vipps.no.";
												var response = new {
																responseInfo = new {
																		responseCode = 4060,
																		responseMessage = errorMessage},
																result = new {
																		message = "There is some error in backend service"}
																		};
																												
												return JsonConvert.SerializeObject(response);
										}</set-body>
		</return-response>
	</when>
</choose>