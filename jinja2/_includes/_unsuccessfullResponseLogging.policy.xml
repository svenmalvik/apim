<choose>
<when condition="@(!{{IsVerboseLoggingEnabled}} &amp;&amp; context.Response.StatusCode &gt;= 300)">
					<log-to-eventhub logger-id="{{EventHub-Logger-Id}}">@{
							var header = "Environment\tProductName\tUtcDate\tInstance\tRegion\tRequestId\tClientIp\tUserEmail\tApiName\tApiPath\tOperationName\tSubscriptionId\tRequestUrl\tMethod\tStatusCode\tRequestBody\tCorrelationId\tDeviceId\tUserId\tResponseCode\tTotalDuration\tBackendTime";
									var values = string.Empty;
									var clientIP = context.Request.IpAddress;
									var forwarderIP = context.Request.Headers.GetValueOrDefault("X-Forwarded-For", "");
									
									if(!string.IsNullOrEmpty(forwarderIP))
									{
											clientIP = forwarderIP.Split(',').FirstOrDefault().Split(':').FirstOrDefault();
									}
									try
									{
											var requestBody = "NO_BODY";
											if({{IsRequestBodyLogEnabled}} &amp;&amp; context.Request.Body != null)
											{
													requestBody = context.Variables.ContainsKey("tempRequestBody") ? Regex.Replace((string)context.Variables["tempRequestBody"], @"\r\n?|\n|\r|\t", "") :  Regex.Replace(context.Request.Body.As&lt;string&gt;(true), @"\r\n?|\n|\r|\t", "");
											}
											var userId = context.Request.Headers.GetValueOrDefault("X-Customer-Id",   "");
											var totalDurationMS = (System.DateTime.Now.Subtract((DateTime)context.Variables["ReqInTime"])).TotalMilliseconds;
											var backendTimeMS = (System.DateTime.Now.Subtract((DateTime)context.Variables["ReqFwdTime"])).TotalMilliseconds;
											var responseCode = context.Response.Body != null ? (context.Response.Body.As&lt;JObject&gt;(true).SelectToken("responseInfo.responseCode") ?? context.Response.StatusCode).ToString() : context.Response.StatusCode.ToString();
											
											values = string.Join("\t", "{{EnvironmentName}}", context.Product.Name, DateTime.UtcNow.ToString("s") + "Z", context.Deployment.ServiceName,context.Deployment.Region, context.RequestId, clientIP,context.User.Email, context.Api.Name, context.Api.Path, context.Operation.Name,context.Subscription.Id,context.Request.Url.ToUri().ToString(),context.Request.Method, context.Response.StatusCode, requestBody, context.Request.Headers.GetValueOrDefault("X-Global-Context-Id",   ""),context.Request.Headers.GetValueOrDefault("X-Device-Id",   ""),userId,responseCode,totalDurationMS,backendTimeMS);
									}
									catch
									{
											values = string.Join("\t", "{{EnvironmentName}}", context.Product.Name, DateTime.UtcNow.ToString("s") + "Z", context.Deployment.ServiceName,context.Deployment.Region, context.RequestId, clientIP,context.User.Email, context.Api.Name, context.Api.Path, context.Operation.Name,context.Subscription.Id,context.Request.Url.ToUri().ToString(),context.Request.Method, context.Response.StatusCode, "APIMLOGEXCEPTION", context.Request.Headers.GetValueOrDefault("X-Global-Context-Id",   ""),context.Request.Headers.GetValueOrDefault("X-Device-Id",   ""),"APIMLOGEXCEPTION","APIMLOGEXCEPTION","APIMLOGEXCEPTION","APIMLOGEXCEPTION");
									}
									
									return header + "\n" + values;
					}</log-to-eventhub>
</when>
<when condition="{{IsVerboseLoggingEnabled}}">
					<log-to-eventhub logger-id="{{EventHub-Logger-Id}}">@{
							var header = "Environment\tProductName\tUtcDate\tInstance\tRegion\tRequestId\tClientIp\tUserEmail\tApiName\tApiPath\tOperationName\tSubscriptionId\tRequestUrl\tMethod\tStatusCode\tRequestBody\tCorrelationId\tDeviceId\tUserId\tResponseCode\tTotalDuration\tBackendTime";
									var values = string.Empty;
									var clientIP = context.Request.IpAddress;
									var forwarderIP = context.Request.Headers.GetValueOrDefault("X-Forwarded-For", "");
									
									if(!string.IsNullOrEmpty(forwarderIP))
									{
											clientIP = forwarderIP.Split(',').FirstOrDefault().Split(':').FirstOrDefault();
									}
									try
									{
											var requestBody = "NO_BODY";
											if({{IsRequestBodyLogEnabled}} &amp;&amp; context.Request.Body != null)
											{
													requestBody = context.Variables.ContainsKey("tempRequestBody") ? Regex.Replace((string)context.Variables["tempRequestBody"], @"\r\n?|\n|\r|\t", "") :  Regex.Replace(context.Request.Body.As&lt;string&gt;(true), @"\r\n?|\n|\r|\t", "");
											}
											var userId = context.Request.Headers.GetValueOrDefault("X-Customer-Id",   "");
											var totalDurationMS = (System.DateTime.Now.Subtract((DateTime)context.Variables["ReqInTime"])).TotalMilliseconds;
											var backendTimeMS = (System.DateTime.Now.Subtract((DateTime)context.Variables["ReqFwdTime"])).TotalMilliseconds;
											var responseCode = context.Response.Body != null ? (context.Response.Body.As&lt;JObject&gt;(true).SelectToken("responseInfo.responseCode") ?? context.Response.StatusCode).ToString() : context.Response.StatusCode.ToString();
											
											values = string.Join("\t", "{{EnvironmentName}}", context.Product.Name, DateTime.UtcNow.ToString("s") + "Z", context.Deployment.ServiceName,context.Deployment.Region, context.RequestId, clientIP,context.User.Email, context.Api.Name, context.Api.Path, context.Operation.Name,context.Subscription.Id,context.Request.Url.ToUri().ToString(),context.Request.Method, context.Response.StatusCode, requestBody, context.Request.Headers.GetValueOrDefault("X-Global-Context-Id",   ""),context.Request.Headers.GetValueOrDefault("X-Device-Id",   ""),userId,responseCode,totalDurationMS,backendTimeMS);
									}
									catch
									{
											values = string.Join("\t", "{{EnvironmentName}}", context.Product.Name, DateTime.UtcNow.ToString("s") + "Z", context.Deployment.ServiceName,context.Deployment.Region, context.RequestId, clientIP,context.User.Email, context.Api.Name, context.Api.Path, context.Operation.Name,context.Subscription.Id,context.Request.Url.ToUri().ToString(),context.Request.Method, context.Response.StatusCode, "APIMLOGEXCEPTION", context.Request.Headers.GetValueOrDefault("X-Global-Context-Id",   ""),context.Request.Headers.GetValueOrDefault("X-Device-Id",   ""),"APIMLOGEXCEPTION","APIMLOGEXCEPTION","APIMLOGEXCEPTION","APIMLOGEXCEPTION");
									}
									
									return header + "\n" + values;
					}</log-to-eventhub>
</when>
</choose>